user=> (doc a
accessor
aclone
add-classpath
add-watch
agent
agent-error
agent-errors
aget
alength
alias
all-ns
alter
alter-meta!
alter-var-root
amap
ancestors
and
apply
apropos
apropos-better
areduce
array-map
as->
aset
aset-boolean
aset-byte
aset-char
aset-double
aset-float
aset-int
aset-long
aset-short
assert
assoc
assoc!
assoc-in
associative?
atom
await
await-for
await1


user=> (doc b
bases
bean
bencode.core
bigdec
bigint
biginteger
binding
bit-and
bit-and-not
bit-clear
bit-flip
bit-not
bit-or
bit-set
bit-shift-left
bit-shift-right
bit-test
bit-xor
boolean
boolean-array
booleans
bound-fn
bound-fn*
bound?
bultitude.core
butlast
byte
byte-array
bytes


user=> (doc c
case                          
cast                          
cat                           
cdoc
cemerick.pomegranate          
cemerick.pomegranate.aether   
char                          
char-array
char-escape-string            
char-name-string              
char?                         
chars
chunk                         
chunk-append                  
chunk-buffer                  
chunk-cons
chunk-first                   
chunk-next                    
chunk-rest                    
chunked-seq?
class                         
class?                        
classlojure.core              
clear-agent-errors
clj-stacktrace.core           
clj-stacktrace.repl           
clj-stacktrace.utils          
clojure-version
clojure.core                  
clojure.core.protocols        
clojure.core.server           
clojure.edn
clojure.instant               
clojure.java.browse           
clojure.java.io               
clojure.java.javadoc
clojure.java.shell            
clojure.main                  
clojure.pprint                
clojure.repl
clojure.set                   
clojure.stacktrace            
clojure.string                
clojure.template
clojure.test                  
clojure.tools.cli             
clojure.uuid                  
clojure.walk
clojure.zip                   clojuredocs                   coll?                         comment
commute                       comp                          comparator                    compare
compare-and-set!              compile                       complement                    complete.core
completing                    concat                        cond                          cond->
cond->>                       condp                         conj                          conj!
cons                          constantly                    construct-proxy               contains?
count                         counted?                      create-ns                     create-struct
cycle


user=> (doc d
dec                          dec'                         decimal?                     declare                      dedupe                       def
default-data-readers         definline                    definterface                 defmacro                     defmethod                    defmulti
defn                         defn-                        defonce                      defprotocol                  defrecord                    defstruct
deftype                      delay                        delay?                       deliver                      denominator                  deref
derive                       descendants                  destructure                  dir                          disj                         disj!
dissoc                       dissoc!                      distinct                     distinct?                    do                           doall
doc                          dorun                        doseq                        dosync                       dot                          dotimes
doto                         double                       double-array                 doubles                      drop                         drop-last
drop-while                   dynapath.defaults            dynapath.dynamic-classpath   dynapath.util


user=> (doc e
eduction          empty             empty?            ensure            ensure-reduced    enumeration-seq   error-handler     error-mode        eval
even?             every-pred        every?            ex-data           ex-info           extend            extend-protocol   extend-type       extenders
extends?


user=> (doc f
false?                 ffirst                 file-seq               filter                 filterv                find                   find-doc
find-keyword           find-name              find-ns                find-protocol-impl     find-protocol-method   find-var               first
flatten                float                  float-array            float?                 floats                 flush                  fn
fn?                    fnext                  fnil                   for                    force                  format                 frequencies
future                 future-call            future-cancel          future-cancelled?      future-done?           future?


user=> (doc g
gen-class             gen-interface         gensym                get                   get-in                get-method            get-proxy-class
get-thread-bindings   get-validator         group-by


user=> (doc h
hash                  hash-combine          hash-map              hash-ordered-coll     hash-set              hash-unordered-coll   help


user=> (doc i
identical?     identity       if             if-let         if-not         if-some        ifn?           import         in-ns          inc            inc'
init-proxy     instance?      int            int-array      integer?       interleave     intern         interpose      into           into-array     ints
io!            isa?           iterate        iterator-seq


user=> (doc j
javadoc   juxt


user=> (doc ke
keep           keep-indexed   key            keys           keyword        keyword?


user=> (doc ke
keep           keep-indexed   key            keys           keyword        keyword?


user=> (doc l
last                       lazy-cat                   lazy-seq                   leiningen.core.classpath   leiningen.core.eval        leiningen.core.main
leiningen.core.pedantic    leiningen.core.project     leiningen.core.user        leiningen.core.utils       leiningen.repl             leiningen.trampoline
let                        letfn                      line-seq                   list                       list*                      list?
load                       load-file                  load-reader                load-string                loaded-libs                locking
long                       long-array                 longs                      loop


user=> (doc m
macroexpand           macroexpand-1         make-array            make-hierarchy        map                   map-entry?            map-indexed
map?                  mapcat                mapv                  max                   max-key               memfn                 memoize
merge                 merge-with            meta                  method-sig            methods               min                   min-key
mix-collection-hash   mod                   monitor-enter         monitor-exit          munge


user=> (doc n
name                                  namespace                             namespace-munge                       neg?
net.cgrand.parsley                    net.cgrand.parsley.fold               net.cgrand.parsley.grammar            net.cgrand.parsley.lrplus
net.cgrand.parsley.stack              net.cgrand.parsley.tree               net.cgrand.parsley.util               net.cgrand.regex
net.cgrand.regex.charset              net.cgrand.regex.unicode              net.cgrand.sjacket                    net.cgrand.sjacket.parser
new                                   newline                               next                                  nfirst
nil?                                  nnext                                 not                                   not-any?
not-empty                             not-every?                            not=                                  nrepl.ack
nrepl.config                          nrepl.core                            nrepl.middleware                      nrepl.middleware.interruptible-eval
nrepl.middleware.load-file            nrepl.middleware.pr-values            nrepl.middleware.session              nrepl.misc
nrepl.server                          nrepl.transport                       nrepl.version                         ns
ns-aliases                            ns-imports                            ns-interns                            ns-map
ns-name                               ns-publics                            ns-refers                             ns-resolve
ns-unalias                            ns-unmap                              nth                                   nthnext
nthrest                               num                                   number?                               numerator


user=> (doc o
object-array   odd?           or


user=> (doc p
parents                 partial                 partition               partition-all           partition-by            pcalls                  peek
persistent!             pmap                    pop                     pop!                    pop-thread-bindings     pos?                    pp
pprint                  pr                      pr-str                  prefer-method           prefers                 primitives-classnames   print
print-ctor              print-dup               print-method            print-simple            print-str               printf                  println
println-str             prn                     prn-str                 promise                 proxy                   proxy-call-with-super   proxy-mappings
proxy-name              proxy-super             pst                     push-thread-bindings    pvalues


user=> (doc quot
quot    quote


user=> (doc r
rand                                      rand-int                                  rand-nth                                  random-sample
range                                     ratio?                                    rational?                                 rationalize
re-find                                   re-groups                                 re-matcher                                re-matches
re-pattern                                re-seq                                    read                                      read-line
read-string                               reader-conditional                        reader-conditional?                       realized?
record?                                   recur                                     reduce                                    reduce-kv
reduced                                   reduced?                                  reductions                                ref
ref-history-count                         ref-max-history                           ref-min-history                           ref-set
refer                                     refer-clojure                             reify                                     release-pending-sends
rem                                       remove                                    remove-all-methods                        remove-method
remove-ns                                 remove-watch                              repeat                                    repeatedly
replace                                   replicate                                 reply.completion                          reply.conversions
reply.eval-modes.nrepl                    reply.eval-modes.shared                   reply.eval-modes.standalone               reply.eval-modes.standalone.concurrency
reply.eval-state                          reply.exit                                reply.exports                             reply.hacks.printing
reply.initialization                      reply.main                                reply.parsing                             reply.reader.jline.completion
reply.reader.simple-jline                 reply.signals                             require                                   reset!
reset-meta!                               resolve                                   rest                                      restart-agent
resultset-seq                             reverse                                   reversible?                               rseq
rsubseq                                   run!


user=> (doc s
satisfies?                     second                         select-keys                    send                           send-off
send-via                       seq                            seq?                           seque                          sequence
sequential?                    set                            set!                           set-agent-send-executor!       set-agent-send-off-executor!
set-error-handler!             set-error-mode!                set-validator!                 set?                           short
short-array                    shorts                         shuffle                        shutdown-agents                slurp
some                           some->                         some->>                        some-fn                        some?
sort                           sort-by                        sorted-map                     sorted-map-by                  sorted-set
sorted-set-by                  sorted?                        source                         special-symbol?                spit
split-at                       split-with                     str                            string?                        struct
struct-map                     subs                           subseq                         subvec                         supers
swap!                          symbol                         symbol?                        sync


user=> (doc t
tagged-literal              tagged-literal?             take                        take-last                   take-nth                    take-while
test                        the-ns                      thread-bound?               throw                       time                        to-array
to-array-2d                 too-enthusiastic            trampoline                  transduce                   transient                   tree-seq
trptcolin.versioneer.core   true?                       try                         type


user=> (doc u
unchecked-add                                        unchecked-add-int                                    unchecked-byte
unchecked-char                                       unchecked-dec                                        unchecked-dec-int
unchecked-divide-int                                 unchecked-double                                     unchecked-float
unchecked-inc                                        unchecked-inc-int                                    unchecked-int
unchecked-long                                       unchecked-multiply                                   unchecked-multiply-int
unchecked-negate                                     unchecked-negate-int                                 unchecked-remainder-int
unchecked-short                                      unchecked-subtract                                   unchecked-subtract-int
underive                                             unquote                                              unquote-splicing
unreduced                                            unsigned-bit-shift-right                             update
update-in                                            update-proxy                                         use
user                                                 user.proxy$java.lang.Object$SignalHandler$d8c00ec7


user=> (doc v
val         vals        var         var-get     var-set     var?        vary-meta   vec         vector      vector-of   vector?     volatile!   volatile?   vreset!
vswap!


user=> (doc w
when                   when-first             when-let               when-not               when-some              while                  with-bindings
with-bindings*         with-in-str            with-loading-context   with-local-vars        with-meta              with-open              with-out-str
with-precision         with-redefs            with-redefs-fn


user=> (doc z
zero?    zipmap
